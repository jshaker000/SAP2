/* verilator lint_off UNUSED */
  // pnemonics for control words
  localparam CONTROL_WORD_WIDTH = 29;

  localparam HLT_POS = 28; // Halt
  localparam ADV_POS = 27; // Advance Instruction Counter to Next Instruction

  localparam ALU_OP_POS   = 23;
  localparam ALU_OP_WIDTH  = 4;
  localparam [ALU_OP_WIDTH-1:0] ALU_ADD  = 0;
  localparam [ALU_OP_WIDTH-1:0] ALU_SUB  = 1;
  localparam [ALU_OP_WIDTH-1:0] ALU_AND  = 2;
  localparam [ALU_OP_WIDTH-1:0] ALU_OR   = 3;
  localparam [ALU_OP_WIDTH-1:0] ALU_XOR  = 4;
  localparam [ALU_OP_WIDTH-1:0] ALU_SL   = 5;
  localparam [ALU_OP_WIDTH-1:0] ALU_SR   = 6;
  localparam [ALU_OP_WIDTH-1:0] ALU_ASR  = 7;
  localparam [ALU_OP_WIDTH-1:0] ALU_ROL  = 8;
  localparam [ALU_OP_WIDTH-1:0] ALU_ROR  = 9;
  localparam [ALU_OP_WIDTH-1:0] ALU_ROLC = 10;
  localparam [ALU_OP_WIDTH-1:0] ALU_RORC = 11;
  localparam [ALU_OP_WIDTH-1:0] ALU_INV  = 12;
  localparam [ALU_OP_WIDTH-1:0] ALU_CHK  = 15;

  localparam SO_POS  = 22; // stack output enable
  localparam SPO_POS = 21; // stack pop
  localparam SPU_POS = 20; // stack push

  localparam MI_POS  = 19; // mem address reg in
  localparam MO_POS  = 18; // mem address reg out

  localparam RI_POS  = 17; // ram data in
  localparam RO_POS  = 16; // ram data out

  localparam II_POS  = 15; // instruction reg out
  localparam IO_POS  = 14; // instruction reg in

  localparam CRI_POS  = 13; // c register in
  localparam CRO_POS  = 12; // c register out

  localparam BRI_POS  = 11; // b register in
  localparam BRO_POS  = 10; // b register out

  localparam TRI_POS  = 9; // temp register in
  localparam TRO_POS  = 8;  // temp register out

  localparam ARI_POS  = 7; // a register in
  localparam ARO_POS  = 6; // a register out

  localparam EL_POS  = 5; // alu subtract
  localparam EO_POS  = 4; // alu out

  localparam OI_POS  = 3; // out register in

  localparam CE_POS  = 2; // program counter enable (increment)
  localparam CO_POS  = 1; // program counter out

  localparam J_POS   = 0; // jump

  //

  localparam [CONTROL_WORD_WIDTH-1:0] c_HLT = {{CONTROL_WORD_WIDTH-1{1'b0}},1'b1} << HLT_POS;
  localparam [CONTROL_WORD_WIDTH-1:0] c_ADV = {{CONTROL_WORD_WIDTH-1{1'b0}},1'b1} << ADV_POS;

  localparam [CONTROL_WORD_WIDTH-1:0] c_SO    = {{CONTROL_WORD_WIDTH-1{1'b0}},1'b1} << SO_POS;
  localparam [CONTROL_WORD_WIDTH-1:0] c_SPO   = {{CONTROL_WORD_WIDTH-1{1'b0}},1'b1} << SPO_POS;
  localparam [CONTROL_WORD_WIDTH-1:0] c_SPU   = {{CONTROL_WORD_WIDTH-1{1'b0}},1'b1} << SPU_POS;

  localparam [CONTROL_WORD_WIDTH-1:0] c_ADD   = {{CONTROL_WORD_WIDTH-ALU_OP_WIDTH{1'b0}}, ALU_ADD}  << ALU_OP_POS;
  localparam [CONTROL_WORD_WIDTH-1:0] c_SUB   = {{CONTROL_WORD_WIDTH-ALU_OP_WIDTH{1'b0}}, ALU_SUB}  << ALU_OP_POS;
  localparam [CONTROL_WORD_WIDTH-1:0] c_AND   = {{CONTROL_WORD_WIDTH-ALU_OP_WIDTH{1'b0}}, ALU_AND}  << ALU_OP_POS;
  localparam [CONTROL_WORD_WIDTH-1:0] c_OR    = {{CONTROL_WORD_WIDTH-ALU_OP_WIDTH{1'b0}}, ALU_OR}   << ALU_OP_POS;
  localparam [CONTROL_WORD_WIDTH-1:0] c_XOR   = {{CONTROL_WORD_WIDTH-ALU_OP_WIDTH{1'b0}}, ALU_XOR}  << ALU_OP_POS;
  localparam [CONTROL_WORD_WIDTH-1:0] c_SL    = {{CONTROL_WORD_WIDTH-ALU_OP_WIDTH{1'b0}}, ALU_SL}   << ALU_OP_POS;
  localparam [CONTROL_WORD_WIDTH-1:0] c_SR    = {{CONTROL_WORD_WIDTH-ALU_OP_WIDTH{1'b0}}, ALU_SR}   << ALU_OP_POS;
  localparam [CONTROL_WORD_WIDTH-1:0] c_ASR   = {{CONTROL_WORD_WIDTH-ALU_OP_WIDTH{1'b0}}, ALU_ASR}  << ALU_OP_POS;
  localparam [CONTROL_WORD_WIDTH-1:0] c_ROL   = {{CONTROL_WORD_WIDTH-ALU_OP_WIDTH{1'b0}}, ALU_ROL}  << ALU_OP_POS;
  localparam [CONTROL_WORD_WIDTH-1:0] c_ROR   = {{CONTROL_WORD_WIDTH-ALU_OP_WIDTH{1'b0}}, ALU_ROR}  << ALU_OP_POS;
  localparam [CONTROL_WORD_WIDTH-1:0] c_ROLC  = {{CONTROL_WORD_WIDTH-ALU_OP_WIDTH{1'b0}}, ALU_ROLC} << ALU_OP_POS;
  localparam [CONTROL_WORD_WIDTH-1:0] c_RORC  = {{CONTROL_WORD_WIDTH-ALU_OP_WIDTH{1'b0}}, ALU_RORC} << ALU_OP_POS;
  localparam [CONTROL_WORD_WIDTH-1:0] c_INV   = {{CONTROL_WORD_WIDTH-ALU_OP_WIDTH{1'b0}}, ALU_INV}  << ALU_OP_POS;
  localparam [CONTROL_WORD_WIDTH-1:0] c_CHK   = {{CONTROL_WORD_WIDTH-ALU_OP_WIDTH{1'b0}}, ALU_CHK}  << ALU_OP_POS;

  localparam [CONTROL_WORD_WIDTH-1:0] c_MI  = {{CONTROL_WORD_WIDTH-1{1'b0}},1'b1} << MI_POS;
  localparam [CONTROL_WORD_WIDTH-1:0] c_MO  = {{CONTROL_WORD_WIDTH-1{1'b0}},1'b1} << MO_POS;

  localparam [CONTROL_WORD_WIDTH-1:0] c_RI  = {{CONTROL_WORD_WIDTH-1{1'b0}},1'b1} << RI_POS;
  localparam [CONTROL_WORD_WIDTH-1:0] c_RO  = {{CONTROL_WORD_WIDTH-1{1'b0}},1'b1} << RO_POS;

  localparam [CONTROL_WORD_WIDTH-1:0] c_II  = {{CONTROL_WORD_WIDTH-1{1'b0}},1'b1} << II_POS;
  localparam [CONTROL_WORD_WIDTH-1:0] c_IO  = {{CONTROL_WORD_WIDTH-1{1'b0}},1'b1} << IO_POS;

  localparam [CONTROL_WORD_WIDTH-1:0] c_CRI  = {{CONTROL_WORD_WIDTH-1{1'b0}},1'b1} << CRI_POS;
  localparam [CONTROL_WORD_WIDTH-1:0] c_CRO  = {{CONTROL_WORD_WIDTH-1{1'b0}},1'b1} << CRO_POS;

  localparam [CONTROL_WORD_WIDTH-1:0] c_BRI  = {{CONTROL_WORD_WIDTH-1{1'b0}},1'b1} << BRI_POS;
  localparam [CONTROL_WORD_WIDTH-1:0] c_BRO  = {{CONTROL_WORD_WIDTH-1{1'b0}},1'b1} << BRO_POS;

  localparam [CONTROL_WORD_WIDTH-1:0] c_TRI  = {{CONTROL_WORD_WIDTH-1{1'b0}},1'b1} << TRI_POS;
  localparam [CONTROL_WORD_WIDTH-1:0] c_TRO  = {{CONTROL_WORD_WIDTH-1{1'b0}},1'b1} << TRO_POS;

  localparam [CONTROL_WORD_WIDTH-1:0] c_ARI  = {{CONTROL_WORD_WIDTH-1{1'b0}},1'b1} << ARI_POS;
  localparam [CONTROL_WORD_WIDTH-1:0] c_ARO  = {{CONTROL_WORD_WIDTH-1{1'b0}},1'b1} << ARO_POS;

  localparam [CONTROL_WORD_WIDTH-1:0] c_EO  = {{CONTROL_WORD_WIDTH-1{1'b0}},1'b1} << EO_POS;
  localparam [CONTROL_WORD_WIDTH-1:0] c_EL  = {{CONTROL_WORD_WIDTH-1{1'b0}},1'b1} << EL_POS;

  localparam [CONTROL_WORD_WIDTH-1:0] c_OI  = {{CONTROL_WORD_WIDTH-1{1'b0}},1'b1} << OI_POS;

  localparam [CONTROL_WORD_WIDTH-1:0] c_CE  = {{CONTROL_WORD_WIDTH-1{1'b0}},1'b1} << CE_POS;
  localparam [CONTROL_WORD_WIDTH-1:0] c_CO  = {{CONTROL_WORD_WIDTH-1{1'b0}},1'b1} << CO_POS;

  localparam [CONTROL_WORD_WIDTH-1:0] c_J   = {{CONTROL_WORD_WIDTH-1{1'b0}},1'b1} << J_POS;
/* verilator lint_on UNUSED */
